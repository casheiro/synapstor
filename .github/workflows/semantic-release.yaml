name: Semantic Release Job

on:
  workflow_call:
    inputs:
      dry_run:
        type: boolean
        default: false
        description: "Executar em modo simulação"
    outputs:
      version:
        description: "Nova versão gerada"
        value: ${{ jobs.semrel.outputs.version }}
      changed:
        description: "Indica se houve mudança na versão"
        value: ${{ jobs.semrel.outputs.changed }}

jobs:
  semrel:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.release.outputs.version }}
      changed: ${{ steps.release.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref || github.ref_name }}

      # Modo dry-run (para PRs)
      - name: Simular versionamento
        if: inputs.dry_run
        id: preview
        uses: python-semantic-release/python-semantic-release@v9.21.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: true
          push: false
          commit: false
          tag: false
          vcs_release: false
          build_metadata: "pre.${{ github.run_number }}"
          prerelease_token: "rc"
          force: "patch"
          root_options: -v
          directory: .

      - name: Capturar versão simulada
        if: inputs.dry_run
        run: |
          echo "version=${{ steps.preview.outputs.version }}" >> $GITHUB_OUTPUT
          echo "changed=${{ steps.preview.outputs.released }}" >> $GITHUB_OUTPUT
          echo "Preview da versão: ${{ steps.preview.outputs.version }}"

      # Gerar CHANGELOG mesmo em modo dry-run
      - name: Gerar CHANGELOG para pré-release
        if: inputs.dry_run && !contains(github.ref, 'main')
        run: |
          echo "Gerando CHANGELOG para pré-release..."
          python -m pip install python-semantic-release

          # Forçar versão para branch de feature com timestamp único
          VERSION_ATUAL=$(grep -oP 'version = "\K[^"]+' pyproject.toml)
          BUILD_NUMBER="${GITHUB_RUN_NUMBER:-1}"
          TIMESTAMP=$(date +"%Y%m%d%H%M")
          NOVA_VERSAO="${VERSION_ATUAL}-rc.${BUILD_NUMBER}.${TIMESTAMP}"

          echo "Versão atual: ${VERSION_ATUAL}"
          echo "Nova versão (com timestamp): ${NOVA_VERSAO}"

          # Atualizar versão no pyproject.toml para garantir que o build use a nova versão
          sed -i "s/^version = \".*\"/version = \"${NOVA_VERSAO}\"/" pyproject.toml

          # Atualizar versão no __init__.py se existir
          if [ -f "src/synapstor/__init__.py" ]; then
            sed -i "s/__version__ = \".*\"/__version__ = \"${NOVA_VERSAO}\"/" src/synapstor/__init__.py
            echo "Versão atualizada em src/synapstor/__init__.py"
          fi

          cat pyproject.toml | grep version

          # Criar ou atualizar CHANGELOG
          echo "# CHANGELOG" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## ${NOVA_VERSAO} ($(date +%Y-%m-%d))" >> CHANGELOG.md
          echo "" >> CHANGELOG.md

          # Obter commits desde o último tag (ou os 10 mais recentes se não houver tags)
          echo "### Alterações" >> CHANGELOG.md
          echo "" >> CHANGELOG.md

          # Tentar obter os commits mais recentes
          if git describe --tags --abbrev=0 2>/dev/null; then
            LAST_TAG=$(git describe --tags --abbrev=0)
            echo "* Commits desde $LAST_TAG:" >> CHANGELOG.md
            git log $LAST_TAG..HEAD --pretty=format:"  - %s" | grep -v "Merge" >> CHANGELOG.md || echo "  - Preparação para pré-release em TestPyPI" >> CHANGELOG.md
          else
            echo "* Commits recentes:" >> CHANGELOG.md
            git log -n 10 --pretty=format:"  - %s" | grep -v "Merge" >> CHANGELOG.md || echo "  - Preparação para pré-release em TestPyPI" >> CHANGELOG.md
          fi

          echo "" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Observações" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "* Esta é uma versão de pré-lançamento gerada automaticamente." >> CHANGELOG.md
          echo "* Você pode instalar esta versão com: \`pip install --pre -i https://test.pypi.org/simple/ synapstor==${NOVA_VERSAO}\`" >> CHANGELOG.md

          # Verificar se o arquivo foi criado e mostrar seu conteúdo
          if [ -f "CHANGELOG.md" ]; then
            echo "============ CHANGELOG GERADO ============"
            cat CHANGELOG.md
            echo "=========================================="

            # Contar linhas para verificar se o arquivo realmente tem conteúdo
            LINHAS=$(wc -l < CHANGELOG.md)
            echo "CHANGELOG.md criado com $LINHAS linhas."
          else
            echo "ERRO: CHANGELOG.md não foi criado!"
            ls -la
          fi

          echo "Nova versão: ${NOVA_VERSAO}"
          echo "version=${NOVA_VERSAO}" >> $GITHUB_OUTPUT
          echo "changed=true" >> $GITHUB_OUTPUT

      # Modo real (para main)
      - name: Executar versionamento
        if: ${{!inputs.dry_run}}
        id: release
        uses: python-semantic-release/python-semantic-release@v9.21.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false
          git_committer_name: "github-actions"
          git_committer_email: "github-actions@github.com"

      - name: Capturar versão real
        if: ${{!inputs.dry_run}}
        run: |
          echo "version=${{ steps.release.outputs.version }}" >> $GITHUB_OUTPUT
          echo "changed=${{ steps.release.outputs.released }}" >> $GITHUB_OUTPUT
