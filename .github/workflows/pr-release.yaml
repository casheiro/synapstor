name: Gerar Release no PR

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

jobs:
  validate-and-release:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: pip

      - name: Install dependencies
        run: pip install -e ".[dev]"

      # ValidaÃ§Ã£o convencional dos commits
      - name: Validate Conventional Commits
        run: |
          # Tenta fazer fetch da main, mas nÃ£o falha se nÃ£o existir
          git fetch origin main:main || true

          echo "Verificando commits do PR..."
          git fetch origin ${{ github.base_ref }} || true
          if git rev-parse --verify origin/${{ github.base_ref }} >/dev/null 2>&1; then
            cz check --rev-range origin/${{ github.base_ref }}..HEAD
          else
            # Se Ã© o primeiro commit, verifica apenas o Ãºltimo commit
            cz check --rev-range HEAD~1..HEAD || cz check --rev-range HEAD
          fi

      # Preview da prÃ³xima versÃ£o
      - name: Preview Version
        id: preview
        env:
          CZ_PREVIEW: 1
        run: |
          NEXT=$(cz bump --dry-run --changelog | tail -n1 | awk '{print $NF}')
          echo "version=$NEXT" >> $GITHUB_OUTPUT
          echo "Preview da prÃ³xima versÃ£o: $NEXT"

      # Gera changelog e tag temporÃ¡ria
      - name: Generate Changelog
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          # Se Ã© o primeiro commit, inicia com 0.1.0
          if ! git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
            VERSION="0.1.0"
          else
            VERSION=$(cz bump --dry-run --changelog | tail -n1 | awk '{print $NF}')
          fi

          echo "## AlteraÃ§Ãµes que serÃ£o incluÃ­das na versÃ£o v$VERSION" > changelog_preview.md
          cz changelog --dry-run >> changelog_preview.md

      # Comenta no PR com o preview
      - name: Comment PR
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const changelog = fs.readFileSync('changelog_preview.md', 'utf8');
            const message = `ðŸš€ Preview da Release\n\n${changelog}`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
