name: Commitizen Release Job

on:
  workflow_call:
    inputs:
      dry_run:
        type: boolean
        default: false
    outputs:
      version:
        value: ${{ jobs.cz.outputs.version }}
      changed:
        value: ${{ jobs.cz.outputs.changed }}

jobs:
  cz:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.bump.outputs.version || steps.bump_preview.outputs.version }}
      changed: ${{ steps.bump.outputs.changed || steps.bump_preview.outputs.changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref || github.ref_name }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: pip

      - name: Install project and Commitizen
        run: pip install -e ".[dev]"

      # Pre-visualizaÃ§Ã£o em PRs (dry-run)
      - name: Preview next version
        if: inputs.dry_run
        id: bump_preview
        env: { CZ_PREVIEW: 1 }
        run: |
          NEXT=$(cz bump --dry-run --changelog | tail -n1 | awk '{print $NF}')
          echo "version=$NEXT" >> $GITHUB_OUTPUT
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "Preview version: $NEXT"

      # ValidaÃ§Ã£o convencional
      - name: Validate Conventional Commits
        run: |
          # Tenta fazer fetch da main, mas nÃ£o falha se nÃ£o existir
          git fetch origin main:main || true
          
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "Verificando commits do PR..."
            git fetch origin ${{ github.base_ref }} || true
            if git rev-parse --verify origin/${{ github.base_ref }} >/dev/null 2>&1; then
              cz check --rev-range origin/${{ github.base_ref }}..HEAD
            else
              # Se Ã© o primeiro commit, verifica apenas o Ãºltimo commit
              cz check --rev-range HEAD~1..HEAD || cz check --rev-range HEAD
            fi
          else
            echo "Verificando commits..."
            # Se Ã© o primeiro commit, tenta verificar apenas o HEAD
            cz check --rev-range HEAD~1..HEAD || cz check --rev-range HEAD
          fi

      # Bump real + changelog + tag
      - name: Bump, changelog and push tag
        if: ${{ !inputs.dry_run }}
        id: bump
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name  "github-actions"
          git config user.email "github-actions@github.com"

          # Se Ã© o primeiro commit, inicia com a versÃ£o 0.1.0
          if ! git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
            echo "version=0.1.0" >> $GITHUB_OUTPUT
            echo "changed=true" >> $GITHUB_OUTPUT
            git tag v0.1.0
          else
            cz bump --yes --changelog
            echo "version=$(cz version)" >> $GITHUB_OUTPUT
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
          
          git push origin --tags

      # Cria Release GitHub
      - name: Create GitHub Release
        if: ${{ !inputs.dry_run }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.bump.outputs.version }}
          name: "Release v${{ steps.bump.outputs.version }}"
          body: |
            VersÃ£o publicada automaticamente pelo workflow ðŸš€
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
