name: Automatic Release

on:
  workflow_call:
    outputs:
      version:
        description: "Published version"
        value: ${{ jobs.auto-release.outputs.version }}

jobs:
  auto-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      version: ${{ steps.next-version.outputs.version }}
    steps:
      - uses: actions/checkout@v3.5.3
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine next version and create tag
        id: next-version
        run: |
          # Install standard-release
          npm install -g standard-version

          # Check if this is the first release
          if ! git describe --tags --abbrev=0 2>/dev/null; then
            # First release, set to 1.0.0
            echo "First release, setting version to 1.0.0"
            echo "version=1.0.0" >> $GITHUB_OUTPUT
            git tag v1.0.0
            git push origin v1.0.0
            exit 0
          fi

          # Run standard-version to create tag and changelog
          standard-version

          # Extract version from the latest tag
          VERSION=$(git describe --abbrev=0 --tags | sed 's/^v//')

          if [ -z "$VERSION" ]; then
            echo "Error generating version"
            exit 1
          fi

          echo "Next version: v$VERSION"
          echo "version=v$VERSION" >> $GITHUB_OUTPUT

          # Push changes and tag to PR branch
          git push --follow-tags origin HEAD:${{ github.head_ref }}

      - name: Create GitHub Release
        if: steps.next-version.outputs.version != ''
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.next-version.outputs.version }}
          generate_release_notes: true
          draft: true  # Create as draft since it hasn't been merged yet
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-test:
    needs: [auto-release]
    if: needs.auto-release.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.5.3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@v1.8.14
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          verbose: true
          print-hash: true

  publish-prod:
    needs: [auto-release, publish-test]
    if: needs.auto-release.result == 'success' && needs.publish-test.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.5.3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.8.14
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
          print-hash: true

  cleanup:
    needs: [auto-release, publish-test, publish-prod]
    if: always() && (needs.publish-test.result == 'failure' || needs.publish-prod.result == 'failure')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.5.3
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Remove Created Tag
        if: needs.auto-release.outputs.version != ''
        run: |
          # Get the version that was created
          VERSION=${{ needs.auto-release.outputs.version }}

          if [ -n "$VERSION" ]; then
            echo "Removing tag $VERSION due to workflow failure"
            # Remove tag locally
            git tag -d $VERSION
            # Remove tag remotely
            git push origin :refs/tags/$VERSION
          fi

      - name: Remove GitHub Release
        if: needs.auto-release.outputs.version != ''
        uses: actions/github-script@v7
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });

            if (releases.length > 0 && releases[0].tag_name === '${{ needs.auto-release.outputs.version }}') {
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releases[0].id
              });
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
