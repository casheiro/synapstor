name: Release Automático

on:
  workflow_call:
    outputs:
      version:
        description: "Versão publicada"
        value: ${{ jobs.auto-release.outputs.version }}

jobs:
  auto-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      version: ${{ steps.next-version.outputs.version }}
    steps:
      - uses: actions/checkout@v3.5.3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Configurar Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determinar próxima versão e criar tag
        id: next-version
        run: |
          # Instala standard-release
          npm install -g standard-version

          # Roda o standard-version para criar tag e changelog
          standard-version

          # Extrai a versão da última tag
          VERSION=$(git describe --abbrev=0 --tags | sed 's/^v//')

          if [ -z "$VERSION" ]; then
            echo "Erro ao gerar versão"
            exit 1
          fi

          echo "Próxima versão: v$VERSION"
          echo "version=v$VERSION" >> $GITHUB_OUTPUT

          # Pusha as alterações e a tag
          git push --follow-tags origin main

      - name: Criar Release no GitHub
        if: steps.next-version.outputs.version != ''
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.next-version.outputs.version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-test:
    needs: auto-release
    if: needs.auto-release.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.5.3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Publicar no TestPyPI
        continue-on-error: true # Não falha se a versão já existir
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
          TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
        run: |
          if ! twine upload dist/* 2>&1 | grep -q "File already exists"; then
            # Se não encontrou "File already exists" no erro, propaga o erro
            twine upload dist/*
          else
            echo "Versão já existe no TestPyPI - continuando..."
          fi

      - name: Testar instalação do TestPyPI
        run: |
          # Cria ambiente virtual para teste
          python -m venv test_env
          source test_env/bin/activate
          
          # Espera um pouco para garantir que o pacote esteja disponível
          sleep 30
          
          # Tenta instalar do TestPyPI
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ synapstor

  publish-prod:
    needs: [auto-release, publish-test]
    if: needs.auto-release.result == 'success' && needs.publish-test.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.5.3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Publicar no PyPI
        continue-on-error: true # Não falha se a versão já existir
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          if ! twine upload dist/* 2>&1 | grep -q "File already exists"; then
            # Se não encontrou "File already exists" no erro, propaga o erro
            twine upload dist/*
          else
            echo "Versão já existe no PyPI - continuando..."
          fi
