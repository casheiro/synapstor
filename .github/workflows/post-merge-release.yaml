name: Gerar Release ap√≥s Merge

on:
  pull_request:
    branches: [main]
    types: [closed]

jobs:
  create-release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: pip

      - name: Install dependencies
        run: pip install -e ".[dev]"

      # Verifica se precisa gerar nova vers√£o
      - name: Check Version Change
        id: version_check
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          
          # Se √© o primeiro commit, sempre gera vers√£o
          if ! git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
            echo "needs_release=true" >> $GITHUB_OUTPUT
            echo "is_first_release=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Verifica se h√° mudan√ßas que exigem nova vers√£o
          BUMP_TYPE=$(cz bump --dry-run | grep -oP "bump: version \K(major|minor|patch)" || echo "none")
          if [ "$BUMP_TYPE" != "none" ]; then
            echo "needs_release=true" >> $GITHUB_OUTPUT
          else
            echo "needs_release=false" >> $GITHUB_OUTPUT
          fi

      # Gera a release apenas se necess√°rio
      - name: Generate Release
        id: release
        if: steps.version_check.outputs.needs_release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Se √© o primeiro commit
          if [[ "${{ steps.version_check.outputs.is_first_release }}" == "true" ]]; then
            VERSION="0.1.0"
            echo "## üéâ Primeira Release v$VERSION" > changelog.md
            echo "" >> changelog.md
            echo "Primeira vers√£o do projeto! üöÄ" >> changelog.md
            git tag "v$VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            # Gera nova vers√£o e changelog
            cz bump --yes --changelog
            VERSION=$(cz version)
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            
            # Gera changelog espec√≠fico para esta vers√£o
            echo "## üöÄ Release v$VERSION" > changelog.md
            echo "" >> changelog.md
            cz changelog --start-rev "v$VERSION^" --end-rev "v$VERSION" >> changelog.md
          fi
          
          git push origin --tags

      # Cria Release no GitHub com changelog (apenas se gerou nova vers√£o)
      - name: Create GitHub Release
        if: steps.version_check.outputs.needs_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.release.outputs.version }}
          name: "Release v${{ steps.release.outputs.version }}"
          body_path: changelog.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Comenta no PR quando n√£o h√° necessidade de nova vers√£o
      - name: Comment No Release
        if: steps.version_check.outputs.needs_release == 'false'
        uses: actions/github-script@v6
        with:
          script: |
            const message = `üìù Merge realizado sem gerar nova vers√£o

            As altera√ß√µes deste PR n√£o exigem uma nova vers√£o do pacote (commits do tipo chore, docs, etc).
            O c√≥digo foi mergeado com sucesso para a main.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            }); 