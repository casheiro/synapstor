name: PyPI Publish Job

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
        default: "testpypi"
        description: "Ambiente para publicação (testpypi ou pypi)"
      version:
        type: string
        required: false
        description: "Versão para publicação (se diferente da versão no pyproject.toml)"
    secrets:
      TEST_PYPI_API_TOKEN:
        required: true
      PYPI_API_TOKEN:
        required: true

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Instalar dependências
        run: pip install build twine

      # Atualizar versão temporária para pre-release se necessário
      - name: Atualizar versão para pre-release
        if: inputs.version != ''
        run: |
          echo "Atualizando versão para ${{ inputs.version }}"
          # Atualiza a versão no pyproject.toml
          sed -i "s/^version = \".*\"/version = \"${{ inputs.version }}\"/" pyproject.toml
          # Atualiza a versão no arquivo Python
          sed -i "s/__version__ = \".*\"/__version__ = \"${{ inputs.version }}\"/" src/synapstor/__init__.py || echo "Arquivo de versão não encontrado no Python"

      - name: Construir pacote
        run: python -m build
      - name: Publicar no TestPyPI
        if: inputs.environment == 'testpypi'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          skip_existing: true
      - name: Publicar no PyPI
        if: inputs.environment == 'pypi'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
